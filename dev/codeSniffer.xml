<?xml version="1.0"?>
<ruleset name="LeMike">
    <description>
        # Coding Standards

        Mostly inherited from the PEAR coding standard,
        because they are tried and trusted by plenty developer for years now,
        and they are well-founded where almost all others are not.
        Due to their age this Coding Standard made some founded additions to update
        the best PEAR Standard.
        To test your code against these condition run

        ```
        phpcs --standard=./dev/codeSniffer.xml src
        ```

        or call: `phpcs --standard=./dev/codeSniffer.xml src --warning-severity=error -s`.

        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in
        [RFC 2119] (http://www.ietf.org/rfc/rfc2119.txt).
    </description>

    <!--- ## Basic language terms -->

    <!---
    This is about the PHP itself and how to design code.
    -->

    <!--- ### Whitespaces -->

    <!--- - There MUST NOT be trailing whitespace at the end of non-blank lines. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

    <!--- ### Indenting and line length -->

    <!---
    - Lines SHOULD be 79 chars long, but MUST NOT take more than 120 characters
      (see [Paul M. Jones thoughts] (http://paul-m-jones.com/archives/276)).
    -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="79"/>
            <property name="absoluteLineLimit" value="120"/>
        </properties>
    </rule>

    <!--- - Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!-- This message is not required as spaces are allowed for alignment -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing.TooMuchSpaceAfterComma">
        <severity>0</severity>
    </rule>

    <!--- ### Control Structures -->

    <!---
    Some SHALL NOT be used:

     - Ternary operators, due to their lack in readability and performance.

    #### Split long statements onto several lines

    Keeping the operators at the beginning of the line has two advantages:

      - It is trivial to comment out a particular line during development while keeping syntactically correct code (except of course the first line).
      - Further is the logic kept at the front where it's not forgotten.
      - Scanning such conditions is very easy since they are aligned below each other.

    ```
    if (($condition1
        || $condition2)
        && $condition3
        && $condition4
    )
    {
        //code here
    }
    ```

    The first condition may be aligned to the others.

    ```
    if (   $condition1
        || $condition2
        || $condition3
    )
    {
        //code here
    }
    ```

    The best case is of course when the line does not need to be split.

    ```
    $is_foo = ($condition1 || $condition2);
    $is_bar = ($condition3 && $condtion4);
    if ($is_foo && $is_bar) {
        // ....
    }
    ```

    -->

    <!--- #### Metrics -->

    <!---
    The McCabe-Metric SHOULD stay below 8 and MUST be below 100 within a function, method etc.
    This means that the cyclomatic complexity within this scope only allows eight
    control structures (or eight edges in the control path) after another to provide readability
    and help others to understand the code.
    Try to refactor your code down to more atomic tasks when you get above that level.
    -->
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="8"/>
            <property name="absoluteComplexity" value="100"/>
        </properties>
    </rule>

    <!---
    In addition the nesting of the control path SHOULD stay below 6 and MUST be below 50.
    It is not good to have such big nested algorithm because others won't understand it that fast.
    More important is that the further the nesting goes the less you can adapt code to new
    requirements.
    -->
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property name="nestingLevel" value="5"/>
            <property name="absoluteNestingLevel" value="50"/>
        </properties>
    </rule>

    <!--- ### Function Calls -->

    <!---
    Functions should be called with no spaces between the function name,
    the opening parenthesis, and the first parameter;
    spaces between commas and each parameter, and no space between the last parameter,
    the closing parenthesis, and the semicolon.
    Here's an example:

    ```
    $var = foo($bar, $baz, $quux);
    ```
    -->




    <rule ref="Generic.PHP.DisallowShortOpenTag"/>

    <!-- PHP keywords MUST be in lower case, because constants are uppercase -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>

    <!-- The PHP constants true, false, and null MUST be in lower case. -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <!-- Visibility MUST be declared on all methods. -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>


    <!--
    Method names MUST NOT be declared with a space after the method name.
    The opening brace MUST go on its own line,
    and the closing brace MUST go on the next line following the body.
    There MUST NOT be a space after the opening parenthesis,
    and there MUST NOT be a space before the closing parenthesis. -->
    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

    <!-- PHP code MUST use only UTF-8 without BOM. -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <!-- Class constants MUST be declared in all upper case with underscore separators. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- Use Unix newlines -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- The closing ?> tag MUST be omitted from files containing only PHP. -->
    <rule ref="Zend.Files.ClosingTag"/>

    <!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
        <severity>0</severity>
    </rule>

    <!-- There MUST NOT be more than one statement per line. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!-- Use warnings for inline control structures -->
    <rule ref="Generic.ControlStructures.InlineControlStructure">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>

    <!-- Method arguments with default values MUST go at the end of the argument list. -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. When the argument list is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnNewLine">
        <severity>0</severity>
    </rule>

    <!-- When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.
 Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PSR2.Methods.FunctionCallSignature.Indent">
        <severity>0</severity>
    </rule>

    <!--
    The general style rules for control structures are as follows:
    There MUST be one space after the control structure keyword
    There MUST NOT be a space after the opening parenthesis
    There MUST NOT be a space before the closing parenthesis
    The structure body MUST be indented once
    -->
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <!-- checked in ControlStructures/ControlStructureSpacingSniff -->

    <!-- The body of each structure MUST be enclosed by braces. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the body. -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
    <rule ref="Generic.Commenting.Todo"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <rule ref="PEAR.Files.IncludingFile"/>

    <rule ref="PEAR.Formatting.MultiLineAssignment"/>
    <rule ref="PEAR.Formatting.MultiLineAssignment.EqualSignLine">
        <severity>0</severity>
    </rule>

    <!-- We don't want gsjlint throwing errors for things we already check -->
    <rule ref="Generic.Debug.ClosureLinter">
        <properties>
            <property name="errorCodes" type="array" value="0210"/>
            <property name="ignoreCodes" type="array" value="0001,0110,0240"/>
        </properties>
    </rule>
    <rule ref="Generic.Debug.ClosureLinter.ExternalToolError">
        <message>%2$s</message>
    </rule>

</ruleset>
